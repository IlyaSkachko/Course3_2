
CREATE SEQUENCE users_sequence START WITH 1 INCREMENT BY 1;

CREATE TABLE USERS (
  ID INTEGER DEFAULT users_sequence.NEXTVAL PRIMARY KEY,
  NAME VARCHAR(100) NOT NULL CHECK(NAME NOT LIKE '%[^a-zA-Z]%'),
  ROLE VARCHAR(50) NOT NULL,
  PASSWORD VARCHAR(100) NOT NULL,
  EMAIL VARCHAR(100) NOT NULL CHECK (EMAIL LIKE '%@%.%')
);

CREATE SEQUENCE test_cases_sequence START WITH 1 INCREMENT BY 1;

CREATE TABLE TEST_CASES (
  ID INTEGER DEFAULT test_cases_sequence.NEXTVAL PRIMARY KEY,
  TITLE VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(250) NOT NULL,
  EXPECTED_RESULT VARCHAR(100) NOT NULL,
  PRIORITY INTEGER NOT NULL CHECK(PRIORITY >=1 AND PRIORITY <= 10),
  USER_ID INTEGER NOT NULL REFERENCES USERS(ID)
);

CREATE SEQUENCE steps_sequence START WITH 1 INCREMENT BY 1;

CREATE TABLE STEPS (
  ID INTEGER DEFAULT steps_sequence.NEXTVAL PRIMARY KEY,
  STEP VARCHAR(100) NOT NULL,
  TEST_CASE_ID INTEGER NOT NULL REFERENCES TEST_CASES(ID)
);

CREATE SEQUENCE test_case_statuses_sequence START WITH 1 INCREMENT BY 1;

CREATE TABLE TEST_CASE_STATUSES (
  ID INTEGER DEFAULT test_case_statuses_sequence.NEXTVAL PRIMARY KEY,
  STATUS VARCHAR(100) NOT NULL,
  DATE_SET DATE NOT NULL,
  TEST_CASE_ID INTEGER NOT NULL REFERENCES TEST_CASES(ID)
);

CREATE OR REPLACE TRIGGER check_date_set
BEFORE INSERT OR UPDATE ON TEST_CASE_STATUSES
FOR EACH ROW
DECLARE
  current_date DATE;
BEGIN
  SELECT SYSDATE INTO current_date FROM DUAL;
  IF :NEW.DATE_SET < current_date THEN
    RAISE_APPLICATION_ERROR(-20001, 'DATE_SET must be greater than or equal to current date.');
  END IF;
END;

CREATE SEQUENCE test_suites_sequence START WITH 1 INCREMENT BY 1;


CREATE TABLE TEST_SUITES (
  ID INTEGER DEFAULT test_suites_sequence.NEXTVAL PRIMARY KEY,
  TITLE VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(250) NOT NULL
);

CREATE SEQUENCE apps_sequence START WITH 1 INCREMENT BY 1;

CREATE TABLE APPS (
  ID INTEGER DEFAULT apps_sequence.NEXTVAL PRIMARY KEY,
  DATE_CREATION DATE NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  TEST_SUITE_ID INTEGER NOT NULL REFERENCES TEST_SUITES(ID)
);

CREATE OR REPLACE TRIGGER check_date_creation
BEFORE INSERT ON APPS
FOR EACH ROW
BEGIN
  IF :NEW.DATE_CREATION < TRUNC(SYSDATE) THEN
    RAISE_APPLICATION_ERROR(-20001, 'DATE_CREATION must be greater than or equal to current date.');
  END IF;
END;


CREATE SEQUENCE defects_sequence START WITH 1 INCREMENT BY 1;

CREATE TABLE DEFECTS (
  ID INTEGER DEFAULT defects_sequence.NEXTVAL PRIMARY KEY,
  DESCRIPTION VARCHAR(250) NOT NULL,
  SEVERITY INTEGER NOT NULL CHECK(SEVERITY >=1 AND SEVERITY <= 10),
  PRIORITY INTEGER NOT NULL CHECK(PRIORITY >=1 AND PRIORITY <= 10)
);

CREATE SEQUENCE defect_statuses_sequence START WITH 1 INCREMENT BY 1;

CREATE TABLE DEFECT_STATUSES (
  ID INTEGER DEFAULT defect_statuses_sequence.NEXTVAL PRIMARY KEY,
  STATUS VARCHAR(100) NOT NULL,
  DATE_SET DATE NOT NULL,
  DEFECT_ID INTEGER NOT NULL REFERENCES DEFECTS(ID)
);

CREATE OR REPLACE TRIGGER check_date_set_defect
BEFORE INSERT OR UPDATE ON DEFECT_STATUSES
FOR EACH ROW
BEGIN
  IF :NEW.DATE_SET < TRUNC(SYSDATE) THEN
    RAISE_APPLICATION_ERROR(-20001, 'DATE_SET must be greater than or equal to current date.');
  END IF;
END;


CREATE SEQUENCE test_runs_sequence START WITH 1 INCREMENT BY 1;

CREATE TABLE TEST_RUNS (
  ID INTEGER DEFAULT test_runs_sequence.NEXTVAL PRIMARY KEY,
  TEST_SUITE_ID INTEGER NOT NULL REFERENCES TEST_SUITES(ID),
  TEST_CASE_ID INTEGER NOT NULL REFERENCES TEST_CASES(ID),
  DATE_START DATE NOT NULL,
  DATE_END DATE NOT NULL,
  RESULT VARCHAR(100) NOT NULL,
  DEFECT_ID INTEGER REFERENCES DEFECTS(ID),
  USER_ID INTEGER NOT NULL REFERENCES USERS(ID)
);

--DROP TABLE IF EXISTS TEST_RUNS;
--DROP TABLE IF EXISTS DEFECT_STATUSES;
--DROP TABLE IF EXISTS DEFECTS;
--DROP TABLE IF EXISTS APPS;
--DROP TABLE IF EXISTS TEST_SUITES;
--DROP TABLE IF EXISTS TEST_CASE_STATUSES;
--DROP TABLE IF EXISTS STEPS;
--DROP TABLE IF EXISTS TEST_CASES;
--DROP TABLE IF EXISTS USERS;
